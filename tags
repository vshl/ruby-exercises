!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<<	ring_buffer.rb	/^  def <<(el)$/;"	f	class:RingBuffer
BookStore	book_store.rb	/^class BookStore$/;"	c
BookStoreTest	book_store_test.rb	/^class BookStoreTest < Minitest::Test$/;"	c
ListNode	linked_list.rb	/^class ListNode$/;"	c
LongestPalindrome	longest_palindrome.rb	/^class LongestPalindrome$/;"	c
RingBuffer	ring_buffer.rb	/^class RingBuffer < Array$/;"	c
SpiralMatrix	spiral_matrix.rb	/^class SpiralMatrix$/;"	c
StringChanger	string_changer.rb	/^class StringChanger$/;"	c
TreeNode	tree_node.rb	/^class TreeNode$/;"	c
all_longest_strings	all_longest_strings.rb	/^def all_longest_strings(arr)$/;"	f
assert_equal	is_palindrome.rb	/^def assert_equal(a, b)$/;"	f
assert_equal	maximum_subarray.rb	/^def assert_equal(a, b)$/;"	f
assert_equal	reverse_integer.rb	/^def assert_equal(a, b)$/;"	f
assert_equal	reverse_string.rb	/^def assert_equal(a, b)$/;"	f
balanced	tree_node.rb	/^  def self.balanced?(root)$/;"	F
base_price	book_store.rb	/^  def self.base_price$/;"	F	class:BookStore
binary_search	binary_search.rb	/^def binary_search(nums, target)$/;"	f
bst_helper	tree_node.rb	/^  def self.bst_helper(root, min, max)$/;"	F
calculate_discount	book_store.rb	/^  def self.calculate_discount(number_books)$/;"	F	class:BookStore
calculate_price	book_store.rb	/^  def self.calculate_price(basket)$/;"	F	class:BookStore
count_primes	count_primes.rb	/^def count_primes(n)$/;"	f
double	string_changer.rb	/^  def double(n)$/;"	f	class:StringChanger
dups	dups.rb	/^def dups(nums)$/;"	f
dups_2	dups.rb	/^def dups_2(nums)$/;"	f
factorial	string_changer.rb	/^  def factorial(num)$/;"	f	class:StringChanger
fib	fibo.rb	/^def fib(n)$/;"	f
fib_2	fibo.rb	/^def fib_2(n)$/;"	f
hand_angle	hour_angle.rb	/^def hand_angle(h, m)$/;"	f
helper	longest_palindrome.rb	/^  def helper(s, l, r)$/;"	f	class:LongestPalindrome
initialize	linked_list.rb	/^  def initialize(val)$/;"	f	class:ListNode
initialize	ring_buffer.rb	/^  def initialize(max_size, enum = nil)$/;"	f	class:RingBuffer
initialize	tree_node.rb	/^  def initialize(val)$/;"	f	class:TreeNode
inorder_traversal	tree_node.rb	/^  def self.inorder_traversal(root)$/;"	F
level_order_traversal	tree_node.rb	/^  def self.level_order_traversal(root)$/;"	F
max_depth	tree_node.rb	/^  def self.max_depth(root)$/;"	F	class:TreeNode
max_gap	max_gap.rb	/^def max_gap(nums)$/;"	f
max_profit	max_gap.rb	/^def max_profit(prices)$/;"	f
maximum_subarray	maximum_subarray.rb	/^def maximum_subarray(nums)$/;"	f
minimal_points	segments_covering_points.rb	/^def minimal_points(segments)$/;"	f
move_zeroes	move_zeroes.rb	/^def move_zeroes(nums)$/;"	f
number_books	book_store.rb	/^  def self.number_books(basket)$/;"	F	class:BookStore
palindrome	linked_list.rb	/^  def self.palindrome?(head)$/;"	F	class:ListNode
palindrome?	is_palindrome.rb	/^def palindrome?(str)$/;"	f
palindrome_2?	is_palindrome.rb	/^def palindrome_2?(num)$/;"	f
plus_one	plus_one.rb	/^def plus_one(digits)$/;"	f
postorder_traversal	tree_node.rb	/^  def self.postorder_traversal(root)$/;"	F
power_of_two	power_of_two.rb	/^def power_of_two(n)$/;"	f
product_except_self	product_except_self.rb	/^def product_except_self(nums)$/;"	f
remove_elements	linked_list.rb	/^  def self.remove_elements(head, val)$/;"	F	class:ListNode
reverse	rotate_array.rb	/^def reverse(nums, start, last)$/;"	f
reverse_and_save	string_changer.rb	/^  def reverse_and_save(string)$/;"	f	class:StringChanger
reverse_array	reverse_array.rb	/^def reverse_array(nums)$/;"	f
reverse_integer	reverse_integer.rb	/^def reverse_integer(x)$/;"	f
reverse_list	linked_list.rb	/^  def self.reverse_list(head)$/;"	F	class:ListNode
reverse_string	reverse_string.rb	/^def reverse_string(string)$/;"	f
reverse_string2	reverse_string.rb	/^def reverse_string2(string)$/;"	f
rotate_array	rotate_array.rb	/^def rotate_array(nums, k)$/;"	f
run_tests	is_palindrome.rb	/^def run_tests$/;"	f
run_tests	maximum_subarray.rb	/^def run_tests$/;"	f
run_tests	reverse_integer.rb	/^def run_tests$/;"	f
run_tests	reverse_string.rb	/^def run_tests$/;"	f
serialize	tree_node.rb	/^  def self.serialize(root)$/;"	F
sieve	count_primes.rb	/^def sieve(n)$/;"	f
solution	spiral_matrix.rb	/^  def self.solution(n)$/;"	F	class:SpiralMatrix
sorted_array_to_bst	tree_node.rb	/^  def self.sorted_array_to_bst(nums)$/;"	F
substring	longest_palindrome.rb	/^  def substring(_s)$/;"	f	class:LongestPalindrome
swap	dups.rb	/^def swap(nums, i)$/;"	f
test_empty_basket	book_store_test.rb	/^  def test_empty_basket$/;"	f	class:BookStoreTest
test_five_different_books	book_store_test.rb	/^  def test_five_different_books$/;"	f	class:BookStoreTest
test_four_different_books	book_store_test.rb	/^  def test_four_different_books$/;"	f	class:BookStoreTest
test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three	book_store_test.rb	/^  def test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three$/;"	f	class:BookStoreTest
test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three	book_store_test.rb	/^  def test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three$/;"	f	class:BookStoreTest
test_only_a_single_book	book_store_test.rb	/^  def test_only_a_single_book$/;"	f	class:BookStoreTest
test_three_copies_of_first_book_and_2_each_of_remaining	book_store_test.rb	/^  def test_three_copies_of_first_book_and_2_each_of_remaining$/;"	f	class:BookStoreTest
test_three_different_books	book_store_test.rb	/^  def test_three_different_books$/;"	f	class:BookStoreTest
test_three_each_of_first_2_books_and_2_each_of_remaining_books	book_store_test.rb	/^  def test_three_each_of_first_2_books_and_2_each_of_remaining_books$/;"	f	class:BookStoreTest
test_two_copies_of_each_book	book_store_test.rb	/^  def test_two_copies_of_each_book$/;"	f	class:BookStoreTest
test_two_different_books	book_store_test.rb	/^  def test_two_different_books$/;"	f	class:BookStoreTest
test_two_each_of_first_4_books_and_1_copy_each_of_rest	book_store_test.rb	/^  def test_two_each_of_first_4_books_and_1_copy_each_of_rest$/;"	f	class:BookStoreTest
test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three	book_store_test.rb	/^  def test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three$/;"	f	class:BookStoreTest
test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three	book_store_test.rb	/^  def test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three$/;"	f	class:BookStoreTest
test_two_of_the_same_book	book_store_test.rb	/^  def test_two_of_the_same_book$/;"	f	class:BookStoreTest
traversal	tree_node.rb	/^  def self.traversal(root)$/;"	F
traverse	linked_list.rb	/^  def self.traverse(head)$/;"	F	class:ListNode
two_sum	two_sum.rb	/^def two_sum(nums, target)$/;"	f
unscramble	unscramble.rb	/^def unscramble(word_list, input, _splits)$/;"	f
valid_bst	tree_node.rb	/^  def self.valid_bst?(root)$/;"	F
